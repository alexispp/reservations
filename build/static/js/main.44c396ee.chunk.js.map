{"version":3,"sources":["api/api.js","api/ceremony.js","api/reservation.js","store/login/login-action-types.js","store/login/loginActions.js","components/Header/Header.jsx","views/AdminView/AdminView.jsx","views/CeremoniesView/CeremoniesView.jsx","components/Login/Login.jsx","views/ReservationView/ReservationView.jsx","components/privateRoute.js","App.js","reportWebVitals.js","store/utils.js","store/login/loginReducer.js","store/store.js","index.js"],"names":["API","axios","create","baseURL","process","headers","getCeremonies","a","get","response","getAllCeremonies","addCeremony","ceremony","post","getLastCeremony","getAvailableTimes","id","deleteCeremony","delete","getReservations","ceremonyId","addReservation","reservation","SIGN_IN_REQUEST","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_OUT_REQUEST","SIGN_OUT_SUCCESS","SIGN_OUT_FAILURE","signInRequest","type","signInSuccess","token","payload","signIn","history","dispatch","method","url","data","Authorization","localStorage","getItem","setItem","push","error","signOut","clear","NavBar","useDispatch","useHistory","useState","anchorEl","setAnchorEl","className","Button","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","Header","AdminView","page","setPage","rowsPerPage","setRowsPerPage","openNewReservation","setOpenNewReservation","ceremonies","setCeremonies","reservations","setReservations","selectedCeremony","setSelectedCeremony","useCallback","ceremonyApi","cer","reservationApi","newCeremonies","filter","c","useEffect","resultCeremonies","NewCeremonyDialog","handleClose","ceremonyTimes","Dialog","DialogTitle","initialValues","name","date","numberOfAssistants","timeOptions","show","onSubmit","values","actions","props","DialogContent","TextField","label","value","onChange","handleChange","fullWidth","utils","MomentUtils","DatePicker","format","val","setFieldValue","clearable","autoOk","disablePast","disableToolbar","touched","email","errors","helperText","render","arrayHelpers","FormControl","component","FormLabel","FormGroup","map","time","FormControlLabel","control","Checkbox","color","e","target","checked","remove","form","reduce","acc","obj","index","labelPlacement","DialogActions","submitForm","onClickCeremony","resultReservations","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","Paper","Fab","length","GridList","GridListTile","IconButton","style","Typography","variant","moment","JSON","stringify","replaceAll","replace","Toolbar","Tooltip","title","curr","filename","TableContainer","Table","stickyHeader","TableHead","align","TableBody","slice","row","scope","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","exit","CeremoniesView","useStyles","makeStyles","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","width","submit","schema","Yup","shape","required","password","Login","auth","useSelector","state","authentication","classes","username","Container","maxWidth","CssBaseline","Avatar","validationSchema","autoComplete","autoFocus","textAlign","ColorButton","border","paddingBlock","paddingInline","fontWeight","backdropFilter","CssTextField","transform","borderBottom","borderBottomColor","LoginDialog","ReservationView","openLogin","setOpenLogin","addName","setAddName","setName","setTime","reservationSaved","setReservationSaved","setCeremony","availableTimes","setAvailableTimes","saveResponse","setSaveResponse","times","lastCeremony","Alert","elevation","_","reason","confirmReservation","timeStamp","result","setTimeout","window","location","reload","message","severity","console","log","Box","split","element","disabled","available","timeSelected","Link","href","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","UserRoute","path","rest","currentUser","exact","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isValidToken","decoded","jwt","decode","Date","exp","initState","loading","isAuthenticated","authenticationReducer","user","removeItem","createRootReducer","combineReducers","store","initialState","composeEnhancers","compose","middlewares","thunk","createStore","applyMiddleware","makeStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44c396ee.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// const requestHandler = (req) => {\r\n//   return req;\r\n// };\r\n\r\n// const responseHandler = (res) => {\r\n//   return res ? res.data : res;\r\n// };\r\n\r\n// const responseErrorHandler = (err) => {\r\n//   return Promise.reject(err);\r\n// };\r\n\r\nexport let API = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    //   Authorization: `Bearer ${token}`,\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  },\r\n});\r\n\r\n// export const setAPI = (token) => {\r\n//   API = axios.create({\r\n//     baseURL: 'http://localhost:3000',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     //   Authorization: `Bearer ${token}`,\r\n//     },\r\n//   });\r\n\r\n//   API.interceptors.request.use(requestHandler);\r\n//   API.interceptors.response.use(responseHandler, responseErrorHandler);\r\n// };\r\n","import { API } from \"./api\";\r\n\r\nexport const getCeremonies = async () => {\r\n    try {\r\n        const response = await API.get(`/ceremony`);\r\n        return response;\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const getAllCeremonies = async () => {\r\n    try {\r\n        const response = await API.get(`/ceremony/all`);\r\n        return response;\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const addCeremony = async (ceremony) => {\r\n    try {\r\n        const response = await API.post(`/ceremony`, ceremony);\r\n        return response;\r\n    } catch (error) {\r\n        return \"\";\r\n    }\r\n};\r\n\r\nexport const getLastCeremony = async () => {\r\n    try {\r\n        const response = await API.get(`/ceremony/lastCeremony`);\r\n        return response;\r\n    } catch (error) {\r\n        return \"\";\r\n    }\r\n};\r\n\r\nexport const getAvailableTimes = async (id) => {\r\n    try {\r\n        const response = await API.get(`/ceremony/${id}/availableTimes`);\r\n        return response;\r\n    } catch (error) {\r\n        return \"\";\r\n    }\r\n};\r\n\r\nexport const deleteCeremony = async (id) => {\r\n    try {\r\n        const response = await API.delete(`/ceremony/${id}`);\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n};\r\n","import { API } from \"./api\";\r\n\r\nexport const getReservations = async (ceremonyId) => {\r\n  try {\r\n    const response = await API.post(`/reservation/getAllByCeremony`, {ceremonyId});\r\n    return response;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addReservation = async (reservation) => {\r\n  try {\r\n    const response = await API.post(`/reservation`, reservation);\r\n    return response;\r\n  } catch (error) {\r\n    return error.response;\r\n  }\r\n};\r\n","export const SIGN_IN_REQUEST = \"SIGN_IN_REQUEST\";\r\nexport const SIGN_IN_SUCCESS = \"SIGN_IN_SUCCESS\";\r\nexport const SIGN_IN_FAILURE = \"SIGN_IN_FAILURE\";\r\n\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const SIGN_OUT_REQUEST = \"SIGN_OUT_REQUEST\";\r\nexport const SIGN_OUT_SUCCESS = \"SIGN_OUT_SUCCESS\";\r\nexport const SIGN_OUT_FAILURE = \"SIGN_OUT_FAILURE\";","import axios from \"axios\";\r\n\r\nimport {\r\n  SIGN_IN_FAILURE,\r\n  SIGN_IN_REQUEST,\r\n  SIGN_IN_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_OUT_FAILURE,\r\n  SIGN_OUT_REQUEST,\r\n  SIGN_OUT_SUCCESS,\r\n} from \"./login-action-types\";\r\n\r\n//Sign up action creators\r\nconst signUpRequest = () => {\r\n  return {\r\n    type: SIGN_UP_REQUEST,\r\n  };\r\n};\r\nconst signUpSuccess = (user) => {\r\n  return {\r\n    type: SIGN_UP_SUCCESS,\r\n    payload: {\r\n      user,\r\n    },\r\n  };\r\n};\r\nconst signUpFailure = (error) => {\r\n  return {\r\n    type: SIGN_UP_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const signUp = (user, history) => {\r\n  return async (dispatch) => {\r\n    dispatch(signUpRequest());\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: \"/signUp\",\r\n        data: user,\r\n      });\r\n      const { data } = response.data;\r\n      dispatch(signUpSuccess(data));\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      dispatch(signUpFailure(error));\r\n    }\r\n  };\r\n};\r\n\r\n//Sign in action creators\r\nconst signInRequest = () => {\r\n  return {\r\n    type: SIGN_IN_REQUEST,\r\n  };\r\n};\r\nconst signInSuccess = (token) => {\r\n  return {\r\n    type: SIGN_IN_SUCCESS,\r\n    payload: {\r\n      token,\r\n    },\r\n  };\r\n};\r\nconst signInFailure = (error) => {\r\n  return {\r\n    type: SIGN_IN_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const signIn = (payload, history) => {\r\n  return async (dispatch) => {\r\n    dispatch(signInRequest);\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_API_URL}/auth/signIn`,\r\n        data: payload,\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`,\r\n        },\r\n      });\r\n      const { token } = response.data;\r\n      localStorage.setItem(\"USER-TOKEN\", token);\r\n\r\n      dispatch(signInSuccess(token));\r\n      history.push(\"/admin\");\r\n    } catch (error) {\r\n      dispatch(signInFailure(error));\r\n    }\r\n  };\r\n};\r\n\r\n//sign out action creators\r\nexport const signOutRequest = function () {\r\n  return {\r\n    type: SIGN_OUT_REQUEST,\r\n  };\r\n};\r\n\r\nexport const signOutSuccess = function () {\r\n  return {\r\n    type: SIGN_OUT_SUCCESS,\r\n  };\r\n};\r\n\r\nexport const signOutFailure = function () {\r\n  return {\r\n    type: SIGN_OUT_FAILURE,\r\n  };\r\n};\r\n\r\nexport const signOut = function (history) {\r\n  return (dispatch) => {\r\n    dispatch(signOutRequest());\r\n    localStorage.clear();\r\n    history.push(\"/\");\r\n    if (localStorage.getItem(\"USER_TOKEN\")) {\r\n      dispatch(signOutFailure());\r\n    } else {\r\n      dispatch(signOutSuccess());\r\n    }\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n    Button,\r\n    Menu,\r\n    MenuItem\r\n} from \"@material-ui/core\";\r\n\r\nimport \"./Header.scss\";\r\nimport { signOut } from \"../../store/login/loginActions\";\r\n\r\nconst NavBar = ()=>{\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    \r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    \r\n    return (\r\n      <div className=\"NavBar\">\r\n      <Button\r\n          aria-controls=\"simple-menu\"\r\n          aria-haspopup=\"true\"\r\n          onClick={() => {dispatch(signOut(history));}}\r\n      >\r\n        Cerrar Sesión\r\n      </Button>\r\n      <Button\r\n          aria-controls=\"simple-menu\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleClick}\r\n      >\r\n          Herramientas\r\n      </Button>\r\n      <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n      >\r\n          <MenuItem onClick={() => {history.push(\"/admin\");}}>\r\n              Inicio\r\n          </MenuItem>\r\n          <MenuItem onClick={() => {history.push(\"/admin/ceremonies\");}}>\r\n              Ver Todas las Ceremonias\r\n          </MenuItem>\r\n      </Menu>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  const Header =()=>{\r\n    return (\r\n        <div className=\"AdminHeader\">\r\n                <div className=\"AdminHeaderPanel\">\r\n                    {NavBar()}\r\n                    <span>Ceremonias PL - Panel de Administración</span>\r\n                </div>\r\n            </div>\r\n    )\r\n  }\r\n\r\n\r\nexport default Header;\r\n","import moment from \"moment\";\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport {\r\n    Paper,\r\n    GridList,\r\n    GridListTile,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TablePagination,\r\n    Fab,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    TextField,\r\n    DialogActions,\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    FormGroup,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    Typography,\r\n    IconButton,\r\n    Toolbar,\r\n    Tooltip\r\n} from \"@material-ui/core\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport GetAppRoundedIcon from \"@material-ui/icons/GetAppRounded\";\r\n\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport \"./AdminView.scss\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport * as ceremonyApi from \"../../api/ceremony\";\r\nimport * as reservationApi from \"../../api/reservation\";\r\nimport Header from \"../../components/Header/Header\";\r\n\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst AdminView = () => {\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [openNewReservation, setOpenNewReservation] = useState(false);\r\n    const [ceremonies, setCeremonies] = useState([]);\r\n    const [reservations, setReservations] = useState([]);\r\n    const [selectedCeremony, setSelectedCeremony] = useState(null);\r\n\r\n    const getCeremonies = useCallback(async () => {\r\n        const cer = await ceremonyApi.getCeremonies();\r\n        return cer;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const getReservations = useCallback(\r\n        async (id) => await reservationApi.getReservations(id),\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        []\r\n    );\r\n\r\n    const deleteCeremony = useCallback(async (id) => {\r\n        await ceremonyApi.deleteCeremony(id);\r\n        const newCeremonies = ceremonies.filter((c) => c.id !== id);\r\n        setCeremonies(newCeremonies);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const resultCeremonies = await getCeremonies();\r\n            setCeremonies(resultCeremonies.data);\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const NewCeremonyDialog = ({ open, handleClose }) => {\r\n        const ceremonyTimes = [\r\n            \"09:00 HS\",\r\n            \"11:00 HS\",\r\n            \"15:00 HS\",\r\n            \"17:00 HS\",\r\n            \"19:00 HS\"\r\n        ];\r\n\r\n        return (\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    Nueva Ceremonia\r\n                </DialogTitle>\r\n                <Formik\r\n                    initialValues={{\r\n                        name: \"\",\r\n                        date: null,\r\n                        numberOfAssistants: \"\",\r\n                        timeOptions: [],\r\n                        show: true\r\n                    }}\r\n                    onSubmit={async (values, actions) => {\r\n                        await ceremonyApi.addCeremony(values);\r\n                        const resultCeremonies = await getCeremonies();\r\n                        setCeremonies(resultCeremonies.data);\r\n\r\n                        handleClose(false);\r\n                    }}\r\n                >\r\n                    {(props) => (\r\n                        <DialogContent>\r\n                            <DialogContent>\r\n                                <Form className=\"Form\">\r\n                                    <TextField\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        label=\"Ceremonia\"\r\n                                        value={props.values.name}\r\n                                        onChange={props.handleChange}\r\n                                        fullWidth\r\n                                    />\r\n\r\n                                    <MuiPickersUtilsProvider\r\n                                        utils={MomentUtils}\r\n                                    >\r\n                                        <DatePicker\r\n                                            id=\"date\"\r\n                                            name=\"date\"\r\n                                            label=\"Fecha\"\r\n                                            format=\"DD/MM/YYYY\"\r\n                                            value={props.values.date}\r\n                                            onChange={(val) =>\r\n                                                props.setFieldValue(\"date\", val)\r\n                                            }\r\n                                            clearable\r\n                                            autoOk\r\n                                            disablePast\r\n                                            disableToolbar\r\n                                        />\r\n                                    </MuiPickersUtilsProvider>\r\n\r\n                                    <TextField\r\n                                        id=\"numberOfAssistants\"\r\n                                        label=\"Asistentes\"\r\n                                        type=\"number\"\r\n                                        value={props.values.numberOfAssistants}\r\n                                        onChange={props.handleChange}\r\n                                        error={\r\n                                            props.touched.email &&\r\n                                            Boolean(props.errors.email)\r\n                                        }\r\n                                        helperText={\r\n                                            props.touched.email &&\r\n                                            props.errors.email\r\n                                        }\r\n                                    />\r\n\r\n                                    <FieldArray\r\n                                        name=\"timeOptions\"\r\n                                        render={(arrayHelpers) => (\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <FormLabel component=\"legend\">\r\n                                                    {props.label}\r\n                                                </FormLabel>\r\n                                                <FormGroup className=\"CheckBoxes\">\r\n                                                    {ceremonyTimes.map(\r\n                                                        (time) => {\r\n                                                            return (\r\n                                                                <FormControlLabel\r\n                                                                    key={time}\r\n                                                                    control={\r\n                                                                        <Checkbox\r\n                                                                            name={\r\n                                                                                time\r\n                                                                            }\r\n                                                                            color=\"secondary\"\r\n                                                                            onChange={(\r\n                                                                                e\r\n                                                                            ) => {\r\n                                                                                if (\r\n                                                                                    e\r\n                                                                                        .target\r\n                                                                                        .checked\r\n                                                                                ) {\r\n                                                                                    arrayHelpers.push(\r\n                                                                                        time\r\n                                                                                    );\r\n                                                                                } else {\r\n                                                                                    arrayHelpers.remove(\r\n                                                                                        arrayHelpers.form.values.timeOptions.reduce(\r\n                                                                                            (\r\n                                                                                                acc,\r\n                                                                                                obj,\r\n                                                                                                index\r\n                                                                                            ) => {\r\n                                                                                                if (\r\n                                                                                                    obj ===\r\n                                                                                                    time\r\n                                                                                                ) {\r\n                                                                                                    acc =\r\n                                                                                                        index;\r\n                                                                                                }\r\n                                                                                                return acc;\r\n                                                                                            },\r\n                                                                                            0\r\n                                                                                        )\r\n                                                                                    );\r\n                                                                                }\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    }\r\n                                                                    labelPlacement=\"end\"\r\n                                                                    label={time}\r\n                                                                />\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </FormControl>\r\n                                        )}\r\n                                    />\r\n\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={props.values.show}\r\n                                                onChange={props.handleChange}\r\n                                                name=\"show\"\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        }\r\n                                        label=\"Mostrar\"\r\n                                    />\r\n                                </Form>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    onClick={props.submitForm}\r\n                                >\r\n                                    Aceptar\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </DialogContent>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    const onClickCeremony = async (ceremony) => {\r\n        setSelectedCeremony(ceremony);\r\n        const resultReservations = await getReservations(ceremony.id);\r\n        setReservations(resultReservations.data);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const StyledTableCell = withStyles((theme) => ({\r\n        head: {\r\n            backgroundColor: theme.palette.common.black,\r\n            color: theme.palette.common.white\r\n        },\r\n        body: {\r\n            fontSize: 14\r\n        }\r\n    }))(TableCell);\r\n\r\n    const StyledTableRow = withStyles((theme) => ({\r\n        root: {\r\n            \"&:nth-of-type(odd)\": {\r\n                backgroundColor: theme.palette.action.hover\r\n            }\r\n        }\r\n    }))(TableRow);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"AdminBody\">\r\n                <Paper className=\"Paper CeremoniesPaper\">\r\n                    <Fab\r\n                        className=\"Fab\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"add\"\r\n                        onClick={() => setOpenNewReservation(true)}\r\n                    >\r\n                        <AddIcon />\r\n                    </Fab>\r\n\r\n                    {ceremonies && ceremonies.length > 0 ? (\r\n                        <div className=\"CeremoniesGridListRoot\">\r\n                            <GridList className=\"CeremoniesGridList\">\r\n                                {ceremonies.map((ceremony, index) => {\r\n                                    return (\r\n                                        <GridListTile key={index}>\r\n                                            <Paper\r\n                                                className={`PaperCeremony ${\r\n                                                    !ceremony.show\r\n                                                        ? \"NotShow\"\r\n                                                        : \"\"\r\n                                                }`}\r\n                                                onClick={() => {\r\n                                                    onClickCeremony(ceremony);\r\n                                                }}\r\n                                            >\r\n                                                <IconButton\r\n                                                    className=\"DeleteButton\"\r\n                                                    aria-label=\"delete\"\r\n                                                    onClick={() => {\r\n                                                        deleteCeremony(\r\n                                                            ceremony.id\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteIcon\r\n                                                        style={{ fontSize: 15 }}\r\n                                                    />\r\n                                                </IconButton>\r\n                                                <div className=\"PaperCeremonyData\">\r\n                                                    <Typography variant=\"h5\">\r\n                                                        {ceremony.name}\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"h6\">\r\n                                                        {moment(\r\n                                                            ceremony.date\r\n                                                        ).format(\"DD/MM/YYYY\")}\r\n                                                    </Typography>\r\n                                                    <div>\r\n                                                        Mostrar:{\" \"}\r\n                                                        {ceremony.show\r\n                                                            ? \"Si\"\r\n                                                            : \"No\"}\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        Cantidad de Asistentes:{\" \"}\r\n                                                        {\r\n                                                            ceremony.numberOfAssistants\r\n                                                        }\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        Horarios:{\" \"}\r\n                                                        {JSON.stringify(\r\n                                                            ceremony.timeOptions\r\n                                                        )\r\n                                                            .replaceAll('\"', \"\")\r\n                                                            .replaceAll(\r\n                                                                \"\\\\\",\r\n                                                                \"\"\r\n                                                            )\r\n                                                            .replace(\"[\", \"\")\r\n                                                            .replace(\"]\", \"\")}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Paper>\r\n                                        </GridListTile>\r\n                                    );\r\n                                })}\r\n                            </GridList>\r\n                        </div>\r\n                    ) : (\r\n                        <Typography variant=\"h5\">\r\n                            No hay próximas ceremonias\r\n                        </Typography>\r\n                    )}\r\n                </Paper>\r\n                <Paper className=\"Paper TablePaper\">\r\n                    {reservations && selectedCeremony && (\r\n                        <Toolbar className=\"Toolbar\">\r\n                            <Typography\r\n                                variant=\"h6\"\r\n                                id=\"tableTitle\"\r\n                                component=\"div\"\r\n                            >\r\n                                {selectedCeremony.name}\r\n                            </Typography>\r\n                            <Tooltip title=\"Descargar\">\r\n                                <CSVLink\r\n                                    data={reservations.reduce(\r\n                                        (acc, curr) => {\r\n                                            acc.push([curr.name, curr.time]);\r\n                                            return acc;\r\n                                        },\r\n                                        [[\"Nommbre\", \"Horario\"]]\r\n                                    )}\r\n                                    filename={`${selectedCeremony.name} - reservaciones.csv`}\r\n                                    className=\"btn btn-primary\"\r\n                                    target=\"_blank\"\r\n                                >\r\n                                    <IconButton aria-label=\"download\">\r\n                                        <GetAppRoundedIcon\r\n                                            style={{ fontSize: 15 }}\r\n                                        />\r\n                                    </IconButton>\r\n                                </CSVLink>\r\n                            </Tooltip>\r\n                        </Toolbar>\r\n                    )}\r\n                    <TableContainer component={Paper}>\r\n                        <Table\r\n                            stickyHeader\r\n                            aria-label=\"sticky table\"\r\n                            className=\"ReservationsTable\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>Nombre</StyledTableCell>\r\n                                    <StyledTableCell align=\"right\">\r\n                                        Horario\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {reservations &&\r\n                                    (rowsPerPage > 0\r\n                                        ? reservations.slice(\r\n                                              page * rowsPerPage,\r\n                                              page * rowsPerPage + rowsPerPage\r\n                                          )\r\n                                        : reservations\r\n                                    ).map((row) => (\r\n                                        <StyledTableRow key={row.id}>\r\n                                            <StyledTableCell\r\n                                                component=\"th\"\r\n                                                scope=\"row\"\r\n                                            >\r\n                                                {row.name}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {row.time}\r\n                                            </StyledTableCell>\r\n                                        </StyledTableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={reservations ? reservations.length : 0}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n            <div className=\"AdminFooter\"></div>\r\n\r\n            <NewCeremonyDialog\r\n                open={openNewReservation}\r\n                handleClose={(exit) => {\r\n                    setOpenNewReservation(false);\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminView;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport {\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TablePagination\r\n} from \"@material-ui/core\";\r\nimport \"./CeremoniesView.scss\";\r\nimport Header from \"../../components/Header/Header\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport * as ceremonyApi from \"../../api/ceremony\";\r\n\r\nconst CeremoniesView = () => {\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [ceremonies, setCeremonies] = useState([]);\r\n\r\n    const getCeremonies = useCallback(async () => {\r\n        const cer = await ceremonyApi.getAllCeremonies();\r\n        return cer;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const resultCeremonies = await getCeremonies();\r\n            setCeremonies(resultCeremonies.data);\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const StyledTableCell = withStyles((theme) => ({\r\n        head: {\r\n            backgroundColor: theme.palette.common.black,\r\n            color: theme.palette.common.white\r\n        },\r\n        body: {\r\n            fontSize: 14\r\n        }\r\n    }))(TableCell);\r\n\r\n    const StyledTableRow = withStyles((theme) => ({\r\n        root: {\r\n            \"&:nth-of-type(odd)\": {\r\n                backgroundColor: theme.palette.action.hover\r\n            }\r\n        }\r\n    }))(TableRow);\r\n\r\n    return (\r\n        <div className=\"ViewBody\">\r\n            <Header />\r\n            <div className=\"View\">\r\n                <Paper className=\"Paper TablePaper\">\r\n                    <TableContainer component={Paper}>\r\n                        <Table\r\n                            stickyHeader\r\n                            aria-label=\"sticky table\"\r\n                            className=\"ReservationsTable\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>Nombre</StyledTableCell>\r\n                                    <StyledTableCell>Fecha</StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                        Asistentes\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>Horarios</StyledTableCell>\r\n                                    <StyledTableCell>Mostrar</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {ceremonies &&\r\n                                    (rowsPerPage > 0\r\n                                        ? ceremonies.slice(\r\n                                              page * rowsPerPage,\r\n                                              page * rowsPerPage + rowsPerPage\r\n                                          )\r\n                                        : ceremonies\r\n                                    ).map((row) => (\r\n                                        <StyledTableRow key={row.id}>\r\n                                            <StyledTableCell\r\n                                                component=\"th\"\r\n                                                scope=\"row\"\r\n                                            >\r\n                                                {\" \"}\r\n                                                {row.name}{\" \"}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                {\" \"}\r\n                                                {row.date}{\" \"}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                {\" \"}\r\n                                                {row.numberOfAssistants}{\" \"}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                {\" \"}\r\n                                                {row.timeOptions}{\" \"}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                {\" \"}\r\n                                                {row.show ? \"Si\" : \"No\"}{\" \"}\r\n                                            </StyledTableCell>\r\n                                        </StyledTableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={ceremonies ? ceremonies.length : 0}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CeremoniesView;\r\n","import React from \"react\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    CssBaseline,\r\n    TextField,\r\n    Typography,\r\n    Container,\r\n    makeStyles\r\n} from \"@material-ui/core\";\r\nimport { Form, Formik } from \"formik\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\n\r\nimport { signIn } from \"../../store/login/loginActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    }\r\n}));\r\n\r\nconst schema = Yup.object().shape({\r\n    email: Yup.string().required(\"Required\"),\r\n    password: Yup.string().required(\"Required\")\r\n});\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector((state) => state.authentication);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const onSubmit = async (values) => {\r\n        dispatch(\r\n            signIn(\r\n                {\r\n                    username: values.email,\r\n                    password: values.password\r\n                },\r\n                history\r\n            )\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h4\">Iniciar sesión</Typography>\r\n                <Formik\r\n                    initialValues={{\r\n                        email: \"\",\r\n                        password: \"\"\r\n                    }}\r\n                    onSubmit={onSubmit}\r\n                    validationSchema={schema}\r\n                >\r\n                    {(props) => (\r\n                        <Form className=\"Form\">\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Usuario\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                autoFocus\r\n                                value={props.values.email}\r\n                                onChange={props.handleChange}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Contraseña\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={props.values.password}\r\n                                onChange={props.handleChange}\r\n                            />\r\n                            {(auth.error ||\r\n                                (props.touched.email && props.errors.email) ||\r\n                                (props.touched.password &&\r\n                                    props.errors.password)) && (\r\n                                <Typography\r\n                                    variant=\"body1\"\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        textAlign: \"center\",\r\n                                        color: \"red\"\r\n                                    }}\r\n                                >\r\n                                    Usuario o contraseña incorrectos\r\n                                </Typography>\r\n                            )}\r\n\r\n                            {/* <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        value=\"remember\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Remember me\"\r\n                            /> */}\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                            >\r\n                                Iniciar sesión\r\n                            </Button>\r\n                            {/* <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid> */}\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport {\r\n    Typography,\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Snackbar,\r\n    Link,\r\n    Dialog\r\n} from \"@material-ui/core\";\r\n\r\nimport Login from \"../../components/Login/Login\";\r\n\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport moment from \"moment\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { addReservation } from \"../../api/reservation\";\r\nimport \"./ReservationView.scss\";\r\n\r\nimport * as ceremonyApi from \"../../api/ceremony\";\r\n\r\nconst ColorButton = withStyles(() => ({\r\n    root: {\r\n        color: \"#ffff\",\r\n        border: \"1px solid #ffff\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#f1f1f1\",\r\n            color: \"#000\"\r\n        },\r\n        paddingBlock: 30,\r\n        paddingInline: 60,\r\n        margin: 30,\r\n        fontSize: 26,\r\n        fontWeight: 600,\r\n        backdropFilter: \"blur(2px)\",\r\n        backgroundColor: \"rgba(255, 255, 255, 0.2)\",\r\n        \"@media (max-width: 850px)\": {\r\n            paddingBlock: 15,\r\n            paddingInline: 30,\r\n            margin: 15,\r\n            width: \"100%\"\r\n        }\r\n    }\r\n}))(Button);\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        width: \"90%\",\r\n        \"& label\": {\r\n            color: \"#fff\",\r\n            fontSize: 26,\r\n            transform: \"translate(12px, 29px) scale(1)\"\r\n        },\r\n\r\n        \"& .MuiFilledInput-root\": {\r\n            backgroundColor: \"rgb(0, 0, 0, 0.3)\"\r\n        },\r\n        \"& .MuiFilledInput-underline:after\": {\r\n            borderBottom: \"2px solid #66ccff\"\r\n        },\r\n\r\n        \"& .MuiInputBase-input\": {\r\n            color: \"#fff\",\r\n            fontSize: 32\r\n        },\r\n        \"& label.Mui-focused\": {\r\n            color: \"#fff\",\r\n            fontSize: 20\r\n        },\r\n        \"& label.MuiInputLabel-filled\": {\r\n            color: \"#fff\",\r\n            fontSize: 20\r\n        },\r\n\r\n        \"& .MuiInput-underline:after\": {\r\n            borderBottomColor: \"#fff\"\r\n        },\r\n        \"& .MuiFilledInput-underline:before\": {\r\n            borderBottom: \"1px solid white\"\r\n        },\r\n        \"& .MuiFilledInput-underline-focused:before\": {\r\n            borderBottom: \"1px solid red\"\r\n        }\r\n    }\r\n})(TextField);\r\n\r\nconst LoginDialog = ({ open, handleClose }) => {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"form-dialog-title\"\r\n        >\r\n            <Login />\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst ReservationView = (props) => {\r\n    const [openLogin, setOpenLogin] = useState(false);\r\n    const [addName, setAddName] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [time, setTime] = useState(\"\");\r\n    const [reservationSaved, setReservationSaved] = useState(false);\r\n    const [ceremony, setCeremony] = useState(\"\");\r\n    const [availableTimes, setAvailableTimes] = useState([]);\r\n    const [saveResponse, setSaveResponse] = useState({});\r\n\r\n    const getLastCeremony = useCallback(async () => {\r\n        const cer = await ceremonyApi.getLastCeremony();\r\n        return cer;\r\n    }, []);\r\n\r\n    const getAvailableTimes = useCallback(async () => {\r\n        const times = ceremony\r\n            ? await ceremonyApi.getAvailableTimes(ceremony.id)\r\n            : [];\r\n        return times;\r\n    }, [ceremony]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const lastCeremony = await getLastCeremony();\r\n            setCeremony(lastCeremony.data);\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const availableTimes = await getAvailableTimes();\r\n            setAvailableTimes(availableTimes.data);\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ceremony]);\r\n\r\n    const Alert = (props) => {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    };\r\n\r\n    const timeSelected = (time) => {\r\n        setAddName(true);\r\n        setTime(time);\r\n    };\r\n\r\n    const handleClose = (_, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n\r\n        setReservationSaved(false);\r\n    };\r\n\r\n    const confirmReservation = async () => {\r\n        try {\r\n            const result = await addReservation({\r\n                name: name,\r\n                time: time,\r\n                timeStamp: moment(),\r\n                ceremony: ceremony.id\r\n            });\r\n\r\n            if (result.data.type === \"success\")\r\n                setTimeout(function () {\r\n                    window.location.reload();\r\n                }, 2000);\r\n\r\n            setSaveResponse({\r\n                message: result.data.message,\r\n                severity: result.data.type\r\n            });\r\n            setReservationSaved(true);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Reservations\">\r\n                {ceremony && (\r\n                    <>\r\n                        <Typography className=\"CeremonyName\" variant=\"h1\">\r\n                            {ceremony.name}\r\n                        </Typography>\r\n\r\n                        <div className=\"TimeBox\">\r\n                            {addName ? (\r\n                                <Box className=\"NameContainer\">\r\n                                    <Typography variant=\"h3\">\r\n                                        Complete su nombre y confirme\r\n                                    </Typography>\r\n                                    <CssTextField\r\n                                        id=\"name\"\r\n                                        label=\"Nombre\"\r\n                                        variant=\"filled\"\r\n                                        onChange={(event) => {\r\n                                            setName(event.target.value);\r\n                                        }}\r\n                                    />\r\n                                    <Box className=\"NameButtons\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            onClick={() => {\r\n                                                setAddName(false);\r\n                                                (async () => {\r\n                                                    const availableTimes =\r\n                                                        await getAvailableTimes();\r\n                                                    setAvailableTimes(\r\n                                                        availableTimes.data\r\n                                                    );\r\n                                                })();\r\n                                            }}\r\n                                        >\r\n                                            Atras\r\n                                        </Button>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            className=\"Confirm\"\r\n                                            onClick={confirmReservation}\r\n                                        >\r\n                                            Confirmar\r\n                                        </Button>\r\n                                    </Box>\r\n                                </Box>\r\n                            ) : (\r\n                                <>\r\n                                    {availableTimes &&\r\n                                        availableTimes.message &&\r\n                                        availableTimes.message\r\n                                            .split(\".\")\r\n                                            .map((element) => (\r\n                                                <Typography variant=\"h3\">\r\n                                                    {element}\r\n                                                </Typography>\r\n                                            ))}\r\n\r\n                                    {availableTimes && !availableTimes.message && (\r\n                                        <div className=\"TimeContainer\">\r\n                                            <Typography variant=\"h3\">\r\n                                                ¿En que horario usted desea\r\n                                                participar?\r\n                                            </Typography>\r\n                                            <Box className=\"Buttons\">\r\n                                                {availableTimes.map(\r\n                                                    (element, index) => (\r\n                                                        <ColorButton\r\n                                                            key={index}\r\n                                                            disabled={\r\n                                                                !element.available\r\n                                                            }\r\n                                                            onClick={() => {\r\n                                                                timeSelected(\r\n                                                                    element.time\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            {element.time}\r\n                                                        </ColorButton>\r\n                                                    )\r\n                                                )}\r\n                                            </Box>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {!ceremony && (\r\n                    <Typography className=\"NoCeremonyErrorMessage\" variant=\"h1\">\r\n                        Oh! no hay ceremonias :(\r\n                    </Typography>\r\n                )}\r\n\r\n                <footer className=\"Footer\">\r\n                    <div style={{ paddingInline: \"10px\" }}>Subsede Liniers</div>\r\n                    <div style={{ paddingInline: \"10px\" }}>\r\n                        {\" \"}\r\n                        <Link\r\n                            href=\"#\"\r\n                            onClick={() => {\r\n                                setOpenLogin(true);\r\n                            }}\r\n                        >\r\n                            Iniciar sesion\r\n                        </Link>{\" \"}\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n\r\n            <LoginDialog\r\n                open={openLogin}\r\n                handleClose={() => {\r\n                    setOpenLogin(false);\r\n                }}\r\n            />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                open={reservationSaved}\r\n                autoHideDuration={3000}\r\n                onClose={handleClose}\r\n            >\r\n                <Alert onClose={handleClose} severity={saveResponse.severity}>\r\n                    {saveResponse.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ReservationView;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const UserRoute = ({ component, path, ...rest }) => {\r\n  const { currentUser } = useSelector((state) => state.authentication);\r\n  return currentUser !== null ? (\r\n    <Route exact path={path} component={component} {...rest} />\r\n  ) : (\r\n    <Redirect to={\"/\"} />\r\n  );\r\n};\r\n\r\nexport default UserRoute;","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport AdminView from \"./views/AdminView/AdminView\";\r\nimport CeremoniesView from \"./views/CeremoniesView/CeremoniesView\";\r\nimport ReservationView from \"./views/ReservationView/ReservationView\";\r\nimport PrivateRoute from \"./components/privateRoute\";\r\n\r\nfunction App() {\r\n    // const [token, setToken] = useState();\r\n\r\n    // function PrivateRoute({ children, ...rest }) {\r\n    //   // const auth = useAuth();\r\n    //   return (\r\n    //     <Route\r\n    //       {...rest}\r\n    //       render={({ location }) =>\r\n    //         auth.user ? (\r\n    //           children\r\n    //         ) : (\r\n    //           <Redirect to={{ pathname: \"/\", state: { from: location } }} />\r\n    //         )\r\n    //       }\r\n    //     />\r\n    //   );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            {/* <ProvideAuth> */}\r\n            <Router>\r\n                <Switch>\r\n                    <PrivateRoute path=\"/admin/ceremonies\">\r\n                        <CeremoniesView />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path=\"/admin\">\r\n                        <AdminView />\r\n                    </PrivateRoute>\r\n\r\n                    <Route path=\"/\">\r\n                        <ReservationView />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n            {/* </ProvideAuth> */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import jwt from \"jsonwebtoken\";\r\n\r\nexport const isValidToken = (token) => {\r\n  let decoded = jwt.decode(token);\r\n  return new Date(decoded.exp * 1000) > new Date() ? decoded : null;\r\n};\r\n","// import jwt from \"jsonwebtoken\";\r\nimport {isValidToken} from '../utils'\r\n\r\nimport {\r\n  SIGN_IN_FAILURE,\r\n  SIGN_IN_REQUEST,\r\n  SIGN_IN_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_OUT_FAILURE,\r\n  SIGN_OUT_REQUEST,\r\n  SIGN_OUT_SUCCESS,\r\n} from \"./login-action-types\";\r\n\r\n// export const isValidToken = (token) => {\r\n//   let decoded = jwt.decode(token);\r\n//   return new Date(decoded.exp * 1000) > new Date() ? decoded : null;\r\n// };\r\n\r\nconst initState = {\r\n  currentUser: localStorage.getItem(\"USER-TOKEN\")\r\n    ? isValidToken(localStorage.getItem(\"USER-TOKEN\"))\r\n    : null,\r\n  token: localStorage.getItem(\"USER-TOKEN\")\r\n    ? localStorage.getItem(\"USER-TOKEN\")\r\n    : null,\r\n  error: \"\",\r\n  loading: false,\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst authenticationReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN_REQUEST:\r\n    case SIGN_UP_REQUEST:\r\n    case SIGN_OUT_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        isAuthenticated: false,\r\n      };\r\n    case SIGN_IN_FAILURE:\r\n    case SIGN_UP_FAILURE:\r\n    case SIGN_OUT_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n        currentUser: null,\r\n        isAuthenticated: false,\r\n      };\r\n    case SIGN_UP_SUCCESS:\r\n    case SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        token: action.payload.token,\r\n        currentUser: action.payload.user,\r\n        isAuthenticated: true,\r\n      };\r\n    case SIGN_OUT_SUCCESS:\r\n      localStorage.removeItem(\"USER-TOKEN\");\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        currentUser: null,\r\n        token: \"\",\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default authenticationReducer;","import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport authentication from \"./login/loginReducer\";\r\nimport {isValidToken} from './utils'\r\n\r\nconst createRootReducer = () =>\r\n  combineReducers({\r\n    authentication,\r\n  });\r\n\r\nconst initState = {\r\n  authentication: {\r\n    currentUser: localStorage.getItem(\"USER-TOKEN\")\r\n    ? isValidToken(localStorage.getItem(\"USER-TOKEN\"))\r\n    : null,\r\n    token: localStorage.getItem(\"USER-TOKEN\"),\r\n    error: \"\",\r\n    loading: false,\r\n    isAuthenticated: false,\r\n  },\r\n};\r\n\r\nconst makeStore = (initialState = initState) => {\r\n  let composeEnhancers = compose;\r\n  const middlewares = [thunk];\r\n\r\n  // if (process.env.NODE_ENV === \"development\") {\r\n  //   if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\r\n  //     composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\n  //   }\r\n  // }\r\n\r\n  const store = createStore(\r\n    createRootReducer(),\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(...middlewares))\r\n  );\r\n\r\n  // if (module.hot) {\r\n  //   module.hot.accept(\"./login/loginReducer\", () => {\r\n  //     const nextReducer = require(\"./login/loginReducer\").default;\r\n  //     store.replaceReducer(nextReducer);\r\n  //   });\r\n  // }\r\n  return store;\r\n};\r\n\r\nexport default makeStore;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport makeStore from \"./store/store\";\r\n\r\nconst store = makeStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}